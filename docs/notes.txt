IDEIAS
-> Fazer verificação do status da fila antes de adicionar uma nova instrução no barramento.
-> Localizar quais coordenadas x e y correspondem ao centro da tela.
-> Tentar animar alguma coisa no monitor.
-> Tentar definir um polígono no registrador 0.
-> Implementar função para definir o valor de todos os registradores como 0 após finalizar o programa ('apagar' a tela).
-> Funções que poderíamos implementar também:

    animate_sprite: Uma função para animar os sprites ao longo do tempo, alterando seus frames de acordo com uma sequência predefinida de imagens.

    check_collision_bounds: Uma função para verificar se um sprite está dentro dos limites da tela ou de uma área específica, evitando que ele saia da área visível.

    handle_input: Uma função para lidar com a entrada do jogador, como movimento do teclado ou cliques do mouse, e atualizar as posições dos sprites de acordo.

    update_game_state: Uma função para atualizar o estado do jogo, processando eventos, verificando colisões, atualizando pontuações, etc.

    render_sprites: Uma função para renderizar os sprites na tela, levando em consideração sua posição, estado e quaisquer efeitos visuais.

    load_level: Uma função para carregar e inicializar um novo nível do jogo, incluindo a posição inicial dos sprites, configurações de fundo, obstáculos, etc.

    save_game_state: Uma função para salvar o estado atual do jogo, permitindo que os jogadores continuem de onde pararam em uma sessão anterior.

    handle_powerups: Uma função para lidar com power-ups ou itens especiais que os sprites podem coletar durante o jogo, alterando seu comportamento ou concedendo benefícios temporários.

    play_sound: Uma função para reproduzir efeitos sonoros ou músicas de fundo durante o jogo, melhorando a experiência auditiva do jogador.

    spawn_enemy: Uma função para gerar novos inimigos em locais específicos da tela ou em intervalos de tempo definidos, aumentando gradualmente a dificuldade do jogo.

QUESTÕES
-> A memória de sprites é volátil? Isto é, os sprites criados através da instrução WSM são mantidos após o desligamento da placa?
-> Tendo em vista que cada FIFO possui a capacidade de armazenar 16 palavras de 32 bits, então elas podem armazenar, juntas, no máximo 16 instruções?
-> Quantos sprites podem ser atualizados ao mesmo tempo? Isso porque se a FIFO armazenar no máximo 8 instruções, no caso de termos 9 sprites ou polígonos, apenas 8 deles poderiam ser atualizados de uma vez. 
-> Qual é o sinal que indica quando a tela deve ser renderizada? É o vsync? Como funciona a sincronização com o sinal start (que envia as instruções)?
-> Dado que conseguimos escrever um polígono no reg 0, ele é um registrador para a escrita de polígonos no geral?
-> O ideal é encher a fila e depois descarregar todas as instruções de vez ou enviar uma instrução a cada pulso?
-> Qual o máximo de polígonos e sprites que conseguimos exibir na tela? (Acredito que 31 elementos no total, de qualquer natureza)

FATOS
-> A arquitetura dispões de 32 registradores. O primeiro registrador é reservado para o background e o restante aos sprites.
-> A memória de sprites armazena o bitmap para cada sprite.
-> A memória de sprites consiste em 12.800 palavras de 9 bits, 3 bits para cada componente RGB.
-> Cada sprite deve possuir o tamanho 20x20, cada um ocupando 400 posições de memória. Sendo assim, é possível armazenar na memória de sprites 32 sprites para uso (Acho que já responde uma das questões).
-> A memória de background é utilizada para modificar pequenas partes do background e consiste em 4.800 palavras de 9 bits.
-> O padrão gráfico escolhido foi o VGA com uma resolução de 640x480 pixels.
-> Para 'apagar' um polígono ou sprite é necessário definir o bit SP ou o tamanho do polígono como 0.
-> As instruções nos registradores persistem mesmo após a finalização do programa.
-> O algoritmo de geração de bitmaps ficará a cargo do desenvolvedor.
-> Foi possível perceber que realizar uma animação com o limite de 31 sprites na tela ocasiona uma perda na velocidade de atualização devido ao limite de envio de 13 instruções por frame. (mas como chegamos a essa conclusão?)